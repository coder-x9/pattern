//Client tcp
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<arpa/inet.h>

int main()
{
char *ip="127.0.0.1";
int port=5566;
int sock;
struct sockaddr_in addr;
socklen_t addr_size;
char buffer[1024];
int n;
sock=socket(AF_INET,SOCK_STREAM,0);
if(sock<0)
{
perror("[-]socket error");
exit(1);
}
printf("[+]TCP server socket created\n");
memset(&addr,'\0',sizeof(addr));
addr.sin_family=AF_INET;
addr.sin_port=port;
addr.sin_addr.s_addr=inet_addr(ip);
connect(sock,(struct sockaddr*)&addr,sizeof(addr));
printf("connected to the server\n");
bzero(buffer,1024);
strcpy(buffer,"HELLO THIS IS CLIENT");
printf("client %s\n",buffer);
send(sock,buffer,strlen(buffer),0);
bzero(buffer,1024);
recv(sock,buffer,sizeof(buffer),0);
printf("server %s/n",buffer);
close(sock);
printf("Disconnected from the server\n");
return 0;
}

//Server tcp

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<arpa/inet.h>

int main()
{
char *ip="127.0.0.1";
int port=5566;
int server_sock,client_sock;
struct sockaddr_in server_addr,client_addr;
socklen_t addr_size;
char buffer[1024];
int n;
server_sock=socket(AF_INET,SOCK_STREAM,0);
if(server_sock<0)
{
perror("[-]socket error");
exit(1);
}
printf("[+] TCP server socket created.\n");
memset(&server_addr,'\0',sizeof(server_addr));
server_addr.sin_family=AF_INET;
server_addr.sin_port=port;
server_addr.sin_addr.s_addr=inet_addr(ip);
n=bind(server_sock,(struct sockaddr*)&server_addr,sizeof(server_addr));
if(n<0)
{
perror("[-]bind error");
exit(1);
}
printf("[+]bind to the port number:%d\n",port);
listen(server_sock,5);
printf("listening...\n");
while(1)
{
addr_size=sizeof(client_addr);
client_sock=accept(server_sock,(struct sockaddr*)&client_addr,&addr_size);

printf("[+]client connected\n");
bzero(buffer,1024);
recv(client_sock,buffer,sizeof(buffer),0);
printf("client :%s\n",buffer);
bzero(buffer,1024);
strcpy(buffer,"HI THIS SERVER HAVE A NICE DAY!!!");
printf("server %s\n",buffer);
send(client_sock,buffer,strlen(buffer),0);
close(client_sock);
printf("client disconnected\n\n");
}
return 0;
}

//Concurrent Client
#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

void main() {
	struct sockaddr_in serv_addr;
	int client_fd, PORT, code = 101, len = sizeof(serv_addr);
	char time[30];
	
	printf("Time Client\n");
	
	if((client_fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		printf("Socket creation failed!\n");
		exit(1);
	}
	
	while(1) {
		printf("Enter Time Server port: ");
		scanf("%d", &PORT);
		
		serv_addr.sin_family = AF_INET;
		serv_addr.sin_addr.s_addr = INADDR_ANY;
		serv_addr.sin_port = htons(PORT);
		
		if(sendto(client_fd, &code, sizeof(int), 0, (struct sockaddr*) &serv_addr, len) < 0) {
			printf("Sending failed!\n");
			exit(1);
		} else {
			if(recvfrom(client_fd, time, 30 * sizeof(char), 0, (struct sockaddr*) &serv_addr, &len) < 0) {
	    			printf("Receive failed!\n");
				exit(1);
			} else {
				printf("Received time from Time Server %d: %s", PORT, time);
	    		}
		}
	}
	
    	close(client_fd);
}

//Concurrent Server
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <time.h>
#include <string.h>

void main(int argc, char* argv[]) {
	int server_fd, code;
	struct sockaddr_in serv_addr, cli_addr;
	
	int PORT;
	
	if(argc == 2)
		PORT = atoi(argv[1]);
	else {
		printf("Enter Time Server port!\n");
		exit(1);
	}
	
	printf("Concurrent Time Server\n");
	
	if((server_fd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		printf("Socket creation failed!\n");
		exit(1);
	}
	
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = INADDR_ANY;
	serv_addr.sin_port = htons(PORT);
	
	if(bind(server_fd, (struct sockaddr*) &serv_addr, sizeof(serv_addr)) < 0) {
		printf("Binding failed!\n");
		exit(1);
	}
	
	int len = sizeof(cli_addr);
	
	while(1) {
    		if(recvfrom(server_fd, &code, sizeof(int), 0, (struct sockaddr*) &cli_addr, &len) < 0) {
    			printf("Receive failed!\n");
			exit(1);
		} else if (fork() == 0) {
			printf("Received time request.\n");
			
			time_t now = time(0);
			char* str = ctime(&now);
			
			if(sendto(server_fd, str, (strlen(str) + 1) * sizeof(char), 0, (struct sockaddr*) &cli_addr, len) < 0) {
				printf("Sending failed!\n");
				exit(1);
			} else {
				printf("Time reply sent.\n");
			}
			
			return;
    		}
    	}
    	
    	close(server_fd);
}

//UDP C
#include<stdio.h>
#include<string.h>
#include<sys/socket.h>
#include<stdlib.h>
#include<netdb.h>
int main(int argc,char*argv[])
{
struct sockaddr_in server,client;
if(argc!=3)
printf("input format not correct");
int sockfd=socket(AF_INET,SOCK_DGRAM,0);
if(sockfd==-1)
printf("error in socket()");
server.sin_family=AF_INET;
server.sin_addr.s_addr=INADDR_ANY;
server.sin_port=htons(atoi(argv[2]));
char buffer[100];
printf("enter a message to be sent to the server:\n");
fgets(buffer,100,stdin);
if(sendto(sockfd,buffer,sizeof(buffer),0,(struct sockaddr*)&server,sizeof(server))<0)
printf("error in sendto");
return 0;
}

//UDP S
#include<stdio.h>
#include<string.h>
#include<sys/socket.h>
#include<stdlib.h>
#include<netdb.h>
int main(int argc,char*argv[])
{
struct sockaddr_in server,client;
if(argc!=2)
printf("input format not correct");
int sockfd=socket(AF_INET,SOCK_DGRAM,0);
if(sockfd==-1)
printf("error in socket()");
server.sin_family=AF_INET;
server.sin_addr.s_addr=INADDR_ANY;
server.sin_port=htons(atoi(argv[1]));
if(bind(sockfd,(struct sockaddr*)&server,sizeof(server))<0)
printf("error in bind()!\n");
char buffer[100];
socklen_t server_len=sizeof(server);
printf("server waiting...\n");
if(recvfrom(sockfd,buffer,100,0,(struct sockaddr*)&server,&server_len)<0)
printf("error in recvfrom()");
printf("got a datagram:%s",buffer);
return 0;
}

//Multi C
#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<string.h>
#include<netinet/in.h>
#include<netdb.h>
#define PORT 4444
#define BUF_SIZE 2000

int main(int argc,char **argv)
{
struct sockaddr_in addr,cl_addr;
int sockfd,ret;
char buffer[BUF_SIZE];
struct hostent* server;
char *serverAddr;
if(argc<2)
{
printf("usage:client<ip address>\n");
exit(1);
}
serverAddr=argv[1];
sockfd=socket(AF_INET,SOCK_STREAM,0);
if(sockfd<0)
{
printf("Error creating socket\n");
exit(1);
}
printf("Socket created...\n");
memset(&addr,0,sizeof(addr));
addr.sin_family=AF_INET;
addr.sin_addr.s_addr=inet_addr(serverAddr);
addr.sin_port=PORT;
ret=connect(sockfd,(struct sockaddr*)&addr,sizeof(addr));
if(ret<0)
{
printf("Error connecting to the server\n");
exit(1);
}
printf("Connected to server...\n");
memset(buffer,0,BUF_SIZE);
printf("Enter your message(s)");
while(fgets(buffer,BUF_SIZE,stdin)!=NULL)
{
ret=sendto(sockfd,buffer,BUF_SIZE,0,(struct sockaddr*)&addr,sizeof(addr));
if(ret<0)
{
printf("Error sending data\n\t-%s",buffer);
}
ret=recvfrom(sockfd,buffer,BUF_SIZE,0,NULL,NULL);
if(ret<0)
{
printf("Error receiving data!\n");
}
else
{
printf("Received");
fputs(buffer,stdout);
printf("\n");
}
}
return 0;
}

//Multi S
#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<string.h>
#include<netinet/in.h>
#define PORT 4444
#define BUF_SIZE 2000
#define CLADDR_LEN 100
void main()
{
struct sockaddr_in addr,cl_addr;
int sockfd,len,ret,newsockfd;
char buffer[BUF_SIZE];
pid_t childpid;
char clientAddr[CLADDR_LEN];
sockfd=socket(AF_INET,SOCK_STREAM,0);
if(sockfd<0)
{
printf("Error creating socket\n");
exit(1);
}
printf("Socket created..\n");
memset(&addr,0,sizeof(addr));
addr.sin_family=AF_INET;
addr.sin_addr.s_addr=INADDR_ANY;
addr.sin_port=PORT;
ret=bind(sockfd,(struct sockaddr*)&addr,sizeof(addr));
if(ret<0)
{
printf("error binding\n");
exit(1);
}
printf("Binding done..\n");
printf("Waiting for a connection...\n");
listen(sockfd,5);
for(;;)
{
len=sizeof(cl_addr);
newsockfd=accept(sockfd,(struct sockadddr*)&cl_addr,&len);
if(newsockfd<0)
{
printf("error accepting connection\n");
exit(1);
}
printf("Connected accepted..\n");
inet_ntop(AF_INET,&(cl_addr.sin_addr),clientAddr,CLADDR_LEN);
if((childpid=fork())==0)
{
close(sockfd);
for(;;)
{
memset(buffer,0,BUF_SIZE);
ret=recvfrom(newsockfd,buffer,BUF_SIZE,0,(struct sockaddr*)&cl_addr,&len);
if(ret<0)
{
printf("Error receiving data\n");
exit(1);
}
printf("Received data from %s:%s\n",clientAddr,buffer);
ret=sendto(newsockfd,buffer,BUF_SIZE,0,(struct sockaddr*)&cl_addr,len);
if(ret<0)
{
printf("error sending data\n");
exit(1);
}
printf("Send data to %s:%s\n",clientAddr,buffer);
}
}
close(newsockfd);
}
}

//Dist 
#include<stdio.h>
struct node
{
unsigned dist[20];
unsigned from[20];
}rt[10];
int main()
{
int costmat[20][20];
int nodes,i,j,k,count=0;
printf("\nEnter the number of nodes:");
scanf("%d",&nodes);
printf("\nEnter the cost matrix:");
for(i=0;i<nodes;i++) {
for(j=0;j<nodes;j++){
 scanf("%d",&costmat[i][j]);
 costmat[i][i]=0;
 rt[i].dist[j]=costmat[i][j]:
 rt[i].from[j]=j;
}
}
do
{
count=0;
for(i=0;i<nodes;i++)
{
for(j=0;j<nodes;j++)
{
for(k=0;k<nodes;k++)
{
if(rt[i].dist[j]>costmat[i][k]+rt[k].dist[j])
rt[i].from[j]=k;
count++;
}
}
}
}
}while(count!=0);
for(i=0;i<nodes;i++)
{
printf("\n\nFor router %d\n",i+1);
for(j=0;j<nodes;j++)
{
printf("\t\nnode %d via %d distance
%d".j+1,rt[i].from[j]+1,rt[i].dist[j]);
}
}
printf("\n\n");
}

//Leaky
#include<stdio.h>
int main(){
 int incoming, outgoing, buck_size, n, store = 0;
 printf("Enter bucket size, outgoing rate and no of inputs: ");
 scanf("%d %d %d", &buck_size, &outgoing, &n);
 while (n != 0) {
 printf("Enter the incoming packet size : ");
 scanf("%d", &incoming);
 printf("Incoming packet size %d\n", incoming);
 if (incoming <= (buck_size - store)){
 store += incoming;
 printf("Bucket buffer size %d out of %d\n", store, buck_size);
 } else {
 printf("Dropped %d no of packets\n", incoming - (buck_size - store));
 printf("Bucket buffer size %d out of %d\n", store, buck_size);
 store = buck_size;
 }
 store = store - outgoing;
 if(store < 0)
 store = 0;
 printf("After outgoing ,%d packets left out of %d in buffer\n", store, buck_size);
 n--;
 }
}

//ftpserver
 #include <stdio.h> 
 #include <stdlib.h> 
 #include <string.h> 
 #include <unistd.h> 
 #include <arpa/inet.h> 
 #include <sys/socket.h> 
 #include <netinet/in.h> 
 #define BUFFER_SIZE 1024

 int main() {
 char *ip = "127.0.0.1";
 int port = 5566;

 int server_sock, client_sock;
 struct sockaddr_in server_addr, client_addr;
 socklen_t addr_size;
 char buffer[BUFFER_SIZE];

 FILE *file;
 int read_size;

 if ((server_sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
 perror("Socket error");
exit(EXIT_FAILURE);
}
printf("TCP server socket created.\n");

 memset(&server_addr, 0, sizeof(server_addr));
 server_addr.sin_family = AF_INET;
 server_addr.sin_port = htons(port);
 server_addr.sin_addr.s_addr = inet_addr(ip);

 if (bind(server_sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
 perror("Bind error");
 exit(EXIT_FAILURE);
 }
 printf("Bind to the port number: %d\n", port);

 if (listen(server_sock, 5) < 0) {
 perror("Listen error");
 exit(EXIT_FAILURE);
 }
 printf("Listening...\n");

 addr_size = sizeof(client_addr);
 if ((client_sock = accept(server_sock, (struct sockaddr*)&client_addr, &addr_size)
) < 0) {
 perror("Accept error");
 exit(EXIT_FAILURE);
 }
 printf("Client connected.\n");

 file = fopen("server_file.txt", "rb");
 if (file == NULL) {
 perror("File open failed");
 exit(EXIT_FAILURE);
 }

 while ((read_size = fread(buffer, 1, BUFFER_SIZE, file)) > 0) {
 if (send(client_sock, buffer, read_size, 0) != read_size) {
 perror("Send failed");
 exit(EXIT_FAILURE);
 }
 }

 printf("File sent successfully\n");

 fclose(file);
 close(client_sock);
 close(server_sock);
 return 0;
 }

//ftpclient
#include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
 #include <arpa/inet.h>
 #include <sys/socket.h>
 #include <netinet/in.h>

 #define BUFFER_SIZE 1024

 int main() {
 char *ip = "127.0.0.1";
 int port = 5566;

 int sock;
 struct sockaddr_in addr;
 char buffer[BUFFER_SIZE];

 FILE *file;
 int read_size;

 if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
 perror("Socket error");
 exit(EXIT_FAILURE);
 }
 printf("TCP client socket created.\n");

 memset(&addr, 0, sizeof(addr));
 addr.sin_family = AF_INET;
 addr.sin_port = htons(port);
 addr.sin_addr.s_addr = inet_addr(ip);

 if (connect(sock, (struct sockaddr*)&addr, sizeof(addr)) < 0) {
 perror("Connect error");
 exit(EXIT_FAILURE);
 }
 printf("Connected to the server.\n");

 file = fopen("client_file.txt", "wb");
 if (file == NULL) {
 perror("File open failed");
 exit(EXIT_FAILURE);
 }

 while ((read_size = recv(sock, buffer, BUFFER_SIZE, 0)) > 0) {
 if (fwrite(buffer, 1, read_size, file) != read_size) {
 perror("Write failed");
 exit(EXIT_FAILURE); }
 }

 printf("File received successfully\n");
 fclose(file);
 close(sock);

 return 0;
//Goback client
#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<ctype.h>
#define W 5
char a[10];
char b[10];
void alpha9(int);
int main()
{
int num;
printf(“Enter Number”);
scanf(“%d”,&num);
alpha9(num);
printf(“A:%s”,a);
int s,f,wl,c=1,x,i=0,j,n,p=0,e=0;
struct sockaddr_in ser;
s=socket(AF_INET,SOCK_STREAM,0);
ser.sin_family=AF_INET;
ser.sin_port=6500;
ser.sin_addr.s_addr=inet_addr(“127.0.0.1”);
connect(s,(struct sockaddr*)&ser,sizeof(ser));
printf(“/nTCP Connection Established.\n”);
printf(“\nEnter the number of frames:”);
scanf(“%d”,&f);
alpha9(f);
send(s,a,sizeof(a),0);
strcpy(b,”Time Out”);
while(1)
{
for(i=0;i<W;i++)
{
 alpha9(c);
 send(s,a,sizeof(a),0);
 if(c<=f)
 {
 printf(“\nFrame %d Sent”,c);
 c++;
 }
 }
 i=0;
 wl=W;
 while(i<W)
 {
 recv(s,a,sizeof(a),0);
 p=atoi(a);
 if(strcmp(a,b)==0)
 {
 e=c-wl;
 if(e<f)
 {
 printf(“\n Time Out,Resend Frame %d onwards”,e);
 }
 break;
 }
 else
 {
 if(p<=f)
 {
 printf(“\nFrame %s Acknowledged”,a);
 wl--;
 }
 else
 {
 break;
 }
 }
 if(p>f)
 {
 break;
 }
 i++;
 }
 if(wl==0 && c>f)
 {
 send(s,b,sizeof(b),0);
 break;
 }
 else
 {
 c=c-wl;
 wl=W
 }
 }
 close(s);
 return 0;
 }
 void alpha9(int z)
 {
 int k,i=0,j,g;
 k=z;
 while(k>0)
 {
 i++;
 k=k/10;
 }
 g=i;
 i--;
 while(z>0)
 {
 k=z%10;
 a[i]=k+48;
 i--;
 z=z/10;
 }
 a[g]=’\0’;
}

//Goback server
#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<string.h>
#include<time.h>
#include<stdlib.h>
#include<ctype.h>
#include<arpa/inet.h>
#define W 5
#define P1 50
#define P2 10
char a[10],b[10]; 
void alpha9(int);
int main()
{
struct sockaddr_in ser, cli;
int s, n, sock,i,j,c=1,f;
unsigned int s1; 
s=socket(AF_INET,SOCK_STREAM, 0); 
ser.sin_family=AF_INET; 
ser.sin_port = 6500;
ser.sin_addr.s_addr = inet_addr(“127.0.0.1”); 
bind(s, (struct sockaddr *)&ser, sizeof(ser)); 
listen(s, 1); 
n= sizeof(cli);
sock = accept(s, (struct sockaddr *)&cli,&n); 
s1=(unsigned int)time(NULL); srand(s1); 
strcpy(b,”Time Out”); 
recv(sock, a, sizeof(a),0);
f=atoi(a);
while(1) 
{
for(i=0;i<W;i++)
{ 
recv(sock, a, sizeof(a),0);
if(strcmp(a,b)==0)
{
break;
}
}
i=0;
while(i<W)
{
j=rand()%P1;
if(j<P2)
{
send(sock,b,sizeof(b),0);
break;
}
else
{
alpha9(c);
if(c<=f)
{
printf(“\nFrame %s Received”,a);
send(sock,a,sizeof(a),0);
}
else
{
break;
}
c++;
}
if(c>f)
{
break;
}
i++;
}
}
close(sock);
close(s);
return 0;
}
void alpha9(int z)
{
int k,i=0,j,g;
k=z;
while(k>0)
{
i++:
k=k/10;
}
}
g=i;
i--;
while(z>0)
{
k=z%10;
a[i]=k+48;
i--;
z=z/10;
}
a[g]=’\0’;
}

//Stop and wait client
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<arpa/inet.h>
#include<sys/socket.h>

typedef struct packet
{
char data[1024];
}Packet;
typedef struct frame 
{
int frame_kind,sq_no,ack;
Packet packet;
}Frame;
int main(int argc,char*argv[])
{
if(argc!=2)
{
printf("usage:%s<port>",argv[0]);
exit(0);
}
int port=atoi(argv[1]);
int sockfd;
struct sockaddr_in serverAddr;
char buffer[1024];
socklen_t addr_size;
int frame_id=0;
Frame frame_send;
Frame frame_recv;
int ack_recv=1;
sockfd=socket(AF_INET,SOCK_DGRAM,0);
memset(&serverAddr,'\0',sizeof(serverAddr));
serverAddr.sin_family=AF_INET;
serverAddr.sin_port=htons(port);
serverAddr.sin_addr.s_addr=inet_addr("127.0.0.1");
while(1)
{
if(ack_recv==1)
{
frame_send.sq_no=frame_id;
frame_send.frame_kind=1;
frame_send.ack=0;
printf("enter data");
scanf("%s",buffer);
strcpy(frame_send.packet.data,buffer);
sendto(sockfd,&frame_send,sizeof(Frame),0,(struct sockaddr*)&serverAddr,sizeof(serverAddr));
printf("[+]Frame Sendn");
}
int addr_size=sizeof(serverAddr);
int f_recv_size=recvfrom(sockfd,&frame_recv,sizeof(frame_recv),0,(struct sockaddr*)&serverAddr,&addr_size);
if(f_recv_size>0 && frame_recv.sq_no==0 && frame_recv.ack==frame_id+1)
{
printf("[+]Ack Recieved\n");
ack_recv=1;
}
else
{
printf("[-]Ack Not recieved\n");
ack_recv=0;
}
frame_id++;
}
close(sockfd);
return 0;
}

//Stop and wait server
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
#include<unistd.h>
#include<arpa/inet.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<sys/stat.h>

typedef struct packet
{
char data[1024];
}Packet;
typedef struct frame 
{
int frame_kind,sq_no,ack;
Packet packet;
}Frame;
int main(int argc,char*argv[])
{
if(argc!=2)
{
printf("usage:%s<port>",argv[0]);
exit(0);
}

int port=atoi(argv[1]);
int sockfd;
struct sockaddr_in serverAddr,newAddr;
socklen_t addr_size;
int frame_id=0;
Frame frame_recv;
Frame frame_send;
sockfd=socket(AF_INET,SOCK_DGRAM,0);
memset(&serverAddr,'\0',sizeof(serverAddr));
serverAddr.sin_family=AF_INET;
serverAddr.sin_port=htons(port);
serverAddr.sin_addr.s_addr=inet_addr("127.0.0.1");
bind(sockfd,(struct sockaddr*)&serverAddr,sizeof(serverAddr));
addr_size=sizeof(newAddr);
while(1)
{
int f_recv_size=recvfrom(sockfd,&frame_recv,sizeof(Frame),0,(struct sockaddr*)&newAddr,&addr_size);
if(f_recv_size>0&&frame_recv.frame_kind==1&&frame_recv.sq_no==frame_id)
{
printf("[+]Frame Recieved:%s\n",frame_recv.packet.data);
frame_send.sq_no=0;
frame_send.frame_kind=0;
frame_send.ack=frame_recv.sq_no+1;
sendto(sockfd,&frame_send,sizeof(frame_send),0,(struct sockaddr*)&newAddr,addr_size);
printf("[+]Ack Send\n");
}
else
{
printf("[+]Frame Not Recieved\n");
}
frame_id++;
}
close(sockfd);
return 0;
}